#include <Eigen/Dense>
#include <cassert>
using namespace Eigen;

#define INPUT_SIZE 20
#define HIDDEN_SIZE 10
#define OUTPUT_SIZE 4

class Model 
{
private:
	Matrix<float, HIDDEN_SIZE, INPUT_SIZE> W_i_h;
	Matrix<float, OUTPUT_SIZE, HIDDEN_SIZE> W_h_o;
	Matrix<float, OUTPUT_SIZE, INPUT_SIZE> W;
	VectorXf b_h;
	VectorXf b_o;
	VectorXf b;
public:
	Model(): b_h(HIDDEN_SIZE), b_o(OUTPUT_SIZE), b(OUTPUT_SIZE)
	{
		W_i_h << 0.26439186930656433, -0.48334842920303345, -0.22159238159656525, -0.3472801148891449, -0.3598592281341553, 0.40715888142585754, 0.32587116956710815, 0.19269973039627075, -0.04769585281610489, -0.29926249384880066, -0.14431361854076385, 0.0915333479642868, 0.00614158995449543, 0.1048739030957222, 0.011155306361615658, 0.04245351254940033, -0.04278048872947693, -0.048003342002630234, 0.026006026193499565, 0.02302115596830845, -0.48587191104888916, -0.40273866057395935, 0.12386005371809006, 0.1628565937280655, 0.34493952989578247, 0.24260373413562775, -0.36094388365745544, -0.15391293168067932, 0.08657984435558319, -0.21296954154968262, 0.016297370195388794, 0.22744277119636536, 0.15816275775432587, 0.20465436577796936, 0.013195930980145931, -0.03189139440655708, 0.024794774129986763, -0.08015898615121841, -0.08146828413009644, -0.4899318516254425, -0.08956507593393326, 0.3375370502471924, 0.2748787999153137, 0.4458366930484772, 0.14380817115306854, -0.21233603358268738, -0.24145711958408356, -0.6299229264259338, -0.033295344561338425, -0.3085862696170807, -0.13882198929786682, 0.043313752859830856, 0.09977983683347702, -0.0003220789658371359, 0.23240089416503906, 0.16500476002693176, -0.03049985133111477, 0.07193499803543091, -0.19184115529060364, 0.2423708736896515, -0.12046404182910919, 0.4650193452835083, 0.41323184967041016, -0.2697579860687256, 0.0836048349738121, -0.36457377672195435, -0.2589690387248993, 0.36194661259651184, -0.09002351015806198, -0.16488435864448547, -0.06187696009874344, -0.10588660091161728, -0.24146215617656708, 0.08559432625770569, -0.1630464643239975, -0.009591786190867424, 0.029658416286110878, 0.004515668377280235, 0.12590031325817108, 0.48673245310783386, -0.34571701288223267, -0.5009799003601074, -0.07446471601724625, 0.510187566280365, 0.27125680446624756, 0.4042447507381439, 0.40135714411735535, -0.5209129452705383, -0.05408381298184395, 0.050877656787633896, -0.1058272048830986, -0.11964567750692368, -0.16672062873840332, 0.0004959215293638408, -0.1909170299768448, -0.06120168790221214, -0.12465054541826248, -0.08553943037986755, -0.17003704607486725, -0.6138039827346802, -0.4023386538028717, 0.24060167372226715, -0.4906021058559418, 0.107334665954113, 0.4657303988933563, -0.28181010484695435, 0.14318515360355377, -0.015796031802892685, -0.08008047193288803, -0.09225168079137802, 0.06457024067640305, 0.11782898008823395, 0.16390247642993927, -0.12350106239318848, 0.17065659165382385, 0.013593131676316261, 0.168268620967865, 0.04121822863817215, 0.0032522734254598618, -0.18520459532737732, -0.45764318108558655, 0.4815945625305176, -0.4498094618320465, -0.23679468035697937, 0.3849174976348877, -0.4348476827144623, 0.4244544208049774, 0.06545856595039368, 0.06924699246883392, -0.05623737722635269, 0.06056279316544533, 0.12002383172512054, -0.06737565249204636, 0.19707217812538147, -0.0781077891588211, 0.00039017718518152833, 0.06870154291391373, 0.1359044313430786, -0.08265175670385361, 0.2046675980091095, -0.1304226517677307, 0.09508022665977478, 0.1006971150636673, -0.23897907137870789, 0.08264487981796265, -0.4040137827396393, 0.051256291568279266, 0.07119180262088776, -0.027600420638918877, -0.062133174389600754, -0.20686668157577515, 0.06685569882392883, 0.270084947347641, -0.14797841012477875, 0.17292459309101105, 0.028217211365699768, -0.2276443988084793, -0.048638965934515, 0.06968194991350174, 0.6130944490432739, -0.22283963859081268, -0.4564904272556305, 0.3485972583293915, -0.35751819610595703, 0.33840468525886536, 0.629104733467102, -0.4111384153366089, 0.29424744844436646, -0.05788934603333473, -0.007893855683505535, 0.038459207862615585, -0.022403420880436897, -0.02621850185096264, -0.09125123172998428, 0.10760677605867386, 0.07454456388950348, 0.11301441490650177, -0.05267573893070221, 0.21389399468898773, -0.43571990728378296, -0.22112487256526947, -0.14113503694534302, -0.1310870498418808, -0.34515732526779175, 0.2541089355945587, 0.3072965145111084, 0.44291725754737854, 0.47040748596191406, 0.048461198806762695, 0.00013838992163073272, -0.11876232922077179, -0.24779576063156128, -0.12472942471504211, 0.029905671253800392, -0.05168287456035614, 0.04872894287109375, -0.2047833651304245, -0.12618526816368103, -0.05381741002202034, -0.46014395356178284;
		b_h << -0.17348650097846985, -0.012084390968084335, -0.20327994227409363, -0.06525497883558273, -0.0982925146818161, 0.2812894284725189, -0.05135496333241463, 0.1390444040298462, -0.020426316186785698, -0.24382078647613525;
		W_h_o << -0.5024554133415222, 0.35712572932243347, -0.011550438590347767, 0.14840996265411377, 0.42579033970832825, 0.31337589025497437, 0.43244585394859314, 0.28909170627593994, 0.49229806661605835, 0.26312655210494995, 0.34714290499687195, 0.23420478403568268, -0.15600359439849854, -0.3797391653060913, 0.26131653785705566, -0.055855248123407364, -0.26807931065559387, -0.210105761885643, 0.4398109018802643, 0.0990997925400734, 0.4761129319667816, -0.3859640061855316, -0.09672495722770691, -0.45863696932792664, 0.15005484223365784, 0.5728532075881958, 0.30571287870407104, -0.2266019880771637, -0.38930508494377136, 0.3227531909942627, 0.23890522122383118, -0.038787033408880234, -0.5371788740158081, 0.2623065710067749, -0.48718181252479553, -0.01874343492090702, 0.198769673705101, 0.3542368412017822, 0.3883281648159027, 0.22965508699417114;
		b_o << -0.06553860753774643, 0.09671494364738464, -0.00014947453746572137, -0.06878451257944107;

		W = (W_h_o*W_i_h).cast<float>();
		b = (W_h_o*b_h + b_o).cast<float>();
	}

	VectorXf operator()(VectorXf input)
	{
		assert(input.size()==INPUT_SIZE);
		return (W*input + b).cast<float>();
	}
};
	